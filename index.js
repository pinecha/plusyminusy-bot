import { Client, GatewayIntentBits, SlashCommandBuilder, Routes, EmbedBuilder } from 'discord.js';
// ... reszta importÃ³w i kodu bez zmian

// Dodaj dwie nowe komendy do tablicy commands:
const commands = [
  new SlashCommandBuilder()
    .setName('dodajplus')
    .setDescription('Dodaje plusy uÅ¼ytkownikowi')
    .addUserOption(opt => opt.setName('uzytkownik').setDescription('UÅ¼ytkownik').setRequired(true))
    .addIntegerOption(opt => opt.setName('ilosc').setDescription('IloÅ›Ä‡ plusÃ³w').setRequired(true)),

  new SlashCommandBuilder()
    .setName('dodajminus')
    .setDescription('Dodaje minusy uÅ¼ytkownikowi')
    .addUserOption(opt => opt.setName('uzytkownik').setDescription('UÅ¼ytkownik').setRequired(true))
    .addIntegerOption(opt => opt.setName('ilosc').setDescription('IloÅ›Ä‡ minusÃ³w').setRequired(true)),

  new SlashCommandBuilder()
    .setName('usunplus')
    .setDescription('Usuwa plusy uÅ¼ytkownikowi')
    .addUserOption(opt => opt.setName('uzytkownik').setDescription('UÅ¼ytkownik').setRequired(true))
    .addIntegerOption(opt => opt.setName('ilosc').setDescription('IloÅ›Ä‡ plusÃ³w do usuniÄ™cia').setRequired(true)),

  new SlashCommandBuilder()
    .setName('usunminus')
    .setDescription('Usuwa minusy uÅ¼ytkownikowi')
    .addUserOption(opt => opt.setName('uzytkownik').setDescription('UÅ¼ytkownik').setRequired(true))
    .addIntegerOption(opt => opt.setName('ilosc').setDescription('IloÅ›Ä‡ minusÃ³w do usuniÄ™cia').setRequired(true)),

  new SlashCommandBuilder()
    .setName('mojewyniki')
    .setDescription('Pokazuje twoje plusy i minusy'),

  new SlashCommandBuilder()
    .setName('ranking')
    .setDescription('Pokazuje ranking wszystkich')
].map(cmd => cmd.toJSON());

// Funkcja do usuwania punktÃ³w (odejmowania), ktÃ³ra nie pozwoli zejÅ›Ä‡ poniÅ¼ej 0:
function removePoints(userId, type, count) {
  const data = loadData();
  if (!data[userId]) data[userId] = { plusy: 0, minusy: 0 };
  data[userId][type] = Math.max(0, data[userId][type] - count);
  saveData(data);
}

// W event handlerze interactionCreate dodaj obsÅ‚ugÄ™ nowych komend i Å‚adny embed dla /mojewyniki:
client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const { commandName } = interaction;

  if (commandName === 'dodajplus') {
    const user = interaction.options.getUser('uzytkownik');
    const count = interaction.options.getInteger('ilosc');
    addPoints(user.id, 'plusy', count);
    await interaction.reply(`${user.username} dostaÅ‚(a) ${count} plusa(Ã³w)!`);
  }

  else if (commandName === 'dodajminus') {
    const user = interaction.options.getUser('uzytkownik');
    const count = interaction.options.getInteger('ilosc');
    addPoints(user.id, 'minusy', count);
    await interaction.reply(`${user.username} dostaÅ‚(a) ${count} minusa(Ã³w)!`);
  }

  else if (commandName === 'usunplus') {
    const user = interaction.options.getUser('uzytkownik');
    const count = interaction.options.getInteger('ilosc');
    removePoints(user.id, 'plusy', count);
    await interaction.reply(`UsuniÄ™to ${count} plusa(Ã³w) uÅ¼ytkownikowi ${user.username}.`);
  }

  else if (commandName === 'usunminus') {
    const user = interaction.options.getUser('uzytkownik');
    const count = interaction.options.getInteger('ilosc');
    removePoints(user.id, 'minusy', count);
    await interaction.reply(`UsuniÄ™to ${count} minusa(Ã³w) uÅ¼ytkownikowi ${user.username}.`);
  }

  else if (commandName === 'mojewyniki') {
    const userId = interaction.user.id;
    const { plusy, minusy } = getUserPoints(userId);
    const embed = new EmbedBuilder()
      .setColor('#00FF00')
      .setTitle(`Wyniki uÅ¼ytkownika ${interaction.user.username}`)
      .addFields(
        { name: 'âž• Plusy', value: plusy.toString(), inline: true },
        { name: 'âž– Minusy', value: minusy.toString(), inline: true },
        { name: 'ðŸ’¯ RÃ³Å¼nica', value: (plusy - minusy).toString(), inline: true }
      )
      .setFooter({ text: 'Twoje plusy i minusy' })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  else if (commandName === 'ranking') {
    const ranking = getRanking();
    let msg = '**ðŸ“Š Ranking uÅ¼ytkownikÃ³w:**\n';
    for (let [id, data] of ranking) {
      const user = await client.users.fetch(id);
      msg += `**${user.username}** â€” âž• ${data.plusy} / âž– ${data.minusy}\n`;
    }
    await interaction.reply(msg);
  }
});
